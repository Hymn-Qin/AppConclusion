apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'//kapt3

def config = rootProject.ext.android
def library = rootProject.ext.dep

android {
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //ARouter 在宿主 和 module 模块中分别声明
//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [AROUTER_MODULE_NAME: project.getName()]
//            }
//        }

    }
//    kapt {
//        arguments {
//            arg("AROUTER_MODULE_NAME", project.getName())
//        }
//    }
//    dataBinding.enabled = true
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    //noinspection GradleCompatible
    androidTestImplementation 'androidx.test:runner:1.2.0-alpha04'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0-alpha04'
    
    implementation library.support
    implementation library.constraint
    implementation library.kotlin

    implementation library.kotlinx.coroutines

    implementation library.rxjava2
    /**
     * ARouter
     * ARouter 在宿主 app 和 module 模块中分别声明
     *         javaCompileOptions {*              annotationProcessorOptions {*                  arguments = [AROUTER_MODULE_NAME: project.getName()]
     *}*}* 在宿主 app 和 module 模块中分别依赖
     * arouter-api的作用是引入arouter，只需要在app和baselibrary中引入，
     * 而arouter-compiler是通过arouter依赖注入生成一些额外的的代码，
     * 必须在每个gradle中引入，否则没法生成依赖的代码，导致跳转失败；
     * javaCompileOptions也是每个必须的，否则编译失败
     */
    kapt library.alibaba.aroutercompiler
    implementation project(path: ':commonbase')
    implementation project(':flutter')
}
